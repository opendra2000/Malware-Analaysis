import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import os
import pathlib
import pefile

# malData = pd.read_csv("SamplesDataset.csv", low_memory=True)
# File Header
malData = pd.read_csv('labelsnew.csv', sep=',', low_memory=True)
features = ['e_magic', 'e_lfanew', 'Machine', 'SizeOfOptionalHeader', 'Characteristics', 'NumberOfSections',
            'MajorLinkerVersion', 'MinorLinkerVersion', 'SizeOfCode',
            'SizeOfInitializedData', 'SizeOfUninitializedData',
            'AddressOfEntryPoint', 'BaseOfCode', 'ImageBase',
            'SectionAlignment', 'FileAlignment', 'MajorOperatingSystemVersion',
            'MinorOperatingSystemVersion', 'MajorImageVersion', 'MinorImageVersion',
            'MajorSubsystemVersion', 'MinorSubsystemVersion', 'SizeOfImage',
            'SizeOfHeaders', 'CheckSum', 'Subsystem', 'DllCharacteristics',
            'SizeOfStackReserve', 'SizeOfStackCommit', 'SizeOfHeapReserve',
            'SizeOfHeapCommit', 'LoaderFlags', 'NumberOfRvaAndSizes']


def my_function(pe, filepath):
    filename = os.path.basename(filepath)

    e_magic = pe.DOS_HEADER.e_magic
    e_lfanew = pe.DOS_HEADER.e_lfanew
    # file header
    SizeOfOptionalHeader = pe.FILE_HEADER.SizeOfOptionalHeader
    Machine = pe.FILE_HEADER.Machine
    Characteristics = pe.FILE_HEADER.Characteristics
    NumberOfSections = pe.FILE_HEADER.NumberOfSections
    # optional header
    MajorLinkerVersion = pe.OPTIONAL_HEADER.MajorLinkerVersion
    MinorLinkerVersion = pe.OPTIONAL_HEADER.MinorLinkerVersion
    SizeOfCode = pe.OPTIONAL_HEADER.SizeOfCode
    SizeOfInitializedData = pe.OPTIONAL_HEADER.SizeOfInitializedData
    SizeOfUninitializedData = pe.OPTIONAL_HEADER.SizeOfUninitializedData
    AddressOfEntryPoint = pe.OPTIONAL_HEADER.AddressOfEntryPoint
    BaseOfCode = pe.OPTIONAL_HEADER.BaseOfCode
    ImageBase = pe.OPTIONAL_HEADER.ImageBase
    SectionAlignment = pe.OPTIONAL_HEADER.SectionAlignment
    FileAlignment = pe.OPTIONAL_HEADER.FileAlignment

    MajorOperatingSystemVersion = pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
    MinorOperatingSystemVersion = pe.OPTIONAL_HEADER.MinorOperatingSystemVersion
    MajorImageVersion = pe.OPTIONAL_HEADER.MajorImageVersion
    MinorImageVersion = pe.OPTIONAL_HEADER.MinorImageVersion
    MajorSubsystemVersion = pe.OPTIONAL_HEADER.MajorSubsystemVersion
    MinorSubsystemVersion = pe.OPTIONAL_HEADER.MinorSubsystemVersion

    SizeOfImage = pe.OPTIONAL_HEADER.SizeOfImage
    SizeOfHeaders = pe.OPTIONAL_HEADER.SizeOfHeaders
    CheckSum = pe.OPTIONAL_HEADER.CheckSum
    Subsystem = pe.OPTIONAL_HEADER.Subsystem
    DllCharacteristics = pe.OPTIONAL_HEADER.DllCharacteristics
    SizeOfStackReserve = pe.OPTIONAL_HEADER.SizeOfStackReserve
    SizeOfStackCommit = pe.OPTIONAL_HEADER.SizeOfStackCommit
    SizeOfHeapReserve = pe.OPTIONAL_HEADER.SizeOfHeapReserve
    SizeOfHeapCommit = pe.OPTIONAL_HEADER.SizeOfHeapCommit
    LoaderFlags = pe.OPTIONAL_HEADER.LoaderFlags
    NumberOfRvaAndSizes = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes

    # PE32+ does not contain base of data so this may cause error
    # BaseOfData = pe.OPTIONAL_HEADER.BaseOfData
    # malData.loc[malData['hash'] == filename,
    #             'BaseOfData'] = BaseOfData
    malData.loc[malData['hash'] == filename,
                'e_magic'] = e_magic
    malData.loc[malData['hash'] == filename,
                'e_lfanew'] = e_lfanew
    malData.loc[malData['hash'] == filename,
                'SizeOfOptionalHeader'] = SizeOfOptionalHeader
    malData.loc[malData['hash'] == filename,
                'Machine'] = Machine
    malData.loc[malData['hash'] == filename,
                'Characteristics'] = Characteristics
    malData.loc[malData['hash'] == filename,
                'NumberOfSections'] = NumberOfSections
    malData.loc[malData['hash'] == filename,
                'MajorLinkerVersion'] = MajorLinkerVersion
    malData.loc[malData['hash'] == filename,
                'MinorLinkerVersion'] = MinorLinkerVersion
    malData.loc[malData['hash'] == filename,
                'SizeOfCode'] = SizeOfCode
    malData.loc[malData['hash'] == filename,
                'SizeOfInitializedData'] = SizeOfInitializedData
    malData.loc[malData['hash'] == filename,
                'SizeOfUninitializedData'] = SizeOfUninitializedData
    malData.loc[malData['hash'] == filename,
                'AddressOfEntryPoint'] = AddressOfEntryPoint
    malData.loc[malData['hash'] == filename,
                'BaseOfCode'] = BaseOfCode
    malData.loc[malData['hash'] == filename,
                'ImageBase'] = ImageBase
    malData.loc[malData['hash'] == filename,
                'SectionAlignment'] = SectionAlignment
    malData.loc[malData['hash'] == filename,
                'FileAlignment'] = FileAlignment
    malData.loc[malData['hash'] == filename,
                'MajorOperatingSystemVersion'] = MajorOperatingSystemVersion
    malData.loc[malData['hash'] == filename,
                'MinorOperatingSystemVersion'] = MinorOperatingSystemVersion
    malData.loc[malData['hash'] == filename,
                'MajorImageVersion'] = MajorImageVersion
    malData.loc[malData['hash'] == filename,
                'MinorImageVersion'] = MinorImageVersion
    malData.loc[malData['hash'] == filename,
                'MajorSubsystemVersion'] = MajorSubsystemVersion
    malData.loc[malData['hash'] == filename,
                'MinorSubsystemVersion'] = MinorSubsystemVersion

    malData.loc[malData['hash'] == filename,
                'SizeOfImage'] = SizeOfImage
    malData.loc[malData['hash'] == filename,
                'SizeOfHeaders'] = SizeOfHeaders
    malData.loc[malData['hash'] == filename,
                'CheckSum'] = CheckSum
    malData.loc[malData['hash'] == filename,
                'Subsystem'] = Subsystem
    malData.loc[malData['hash'] == filename,
                'DllCharacteristics'] = DllCharacteristics
    malData.loc[malData['hash'] == filename,
                'SizeOfStackReserve'] = SizeOfStackReserve
    malData.loc[malData['hash'] == filename,
                'SizeOfStackCommit'] = SizeOfStackCommit
    malData.loc[malData['hash'] == filename,
                'SizeOfHeapReserve'] = SizeOfHeapReserve
    malData.loc[malData['hash'] == filename,
                'SizeOfHeapCommit'] = SizeOfHeapCommit
    malData.loc[malData['hash'] == filename,
                'LoaderFlags'] = LoaderFlags
    malData.loc[malData['hash'] == filename,
                'NumberOfRvaAndSizes'] = NumberOfRvaAndSizes


for path in pathlib.Path('samples').glob('*'):
    try:
        pe = pefile.PE(path, fast_load=True)
        path_in_str = str(path)
        my_function(pe, path_in_str)
    except:
        continue
        # migrating all the new changes to csv file
malData.to_csv('labelsnew.csv')


# if filename == '7af697bb4d498348e853c020f1c55046133e8ca5cff0d16527acec0b22920e0c':
#         print("Number of sections "+str(NumberOfSections))
#         malData.loc[malData['hash'] == filename,
#                     'NumberOfSections'].replace([4], 100)
#         print(malData.loc[malData['hash'] == filename,
#                           'NumberOfSections'])
#         print('File is found!!!!!!!!!!!')


# PE sections

# features = [
#     'SectionsNb', 'SectionsMeanEntropy', 'SectionsMinEntropy', 'SectionsMaxEntropy',
#     'SectionsMeanRawsize', 'SectionsMinRawsize', 'SectionMaxRawsize',
#     'SectionsMeanVirtualsize', 'SectionsMinVirtualsize',
#     'SectionMaxVirtualsize', 'ImportsNbDLL', 'ImportsNb',
#     'ImportsNbOrdinal', 'ExportNb', 'ResourcesNb', 'ResourcesMeanEntropy',
#     'ResourcesMinEntropy', 'ResourcesMaxEntropy', 'ResourcesMeanSize',
#     'ResourcesMinSize', 'ResourcesMaxSize', 'LoadConfigurationSize',
#     'VersionInformationSize']

# this prints the malware samples based on label==1
# d2 = malData.query('label == 1')['hash']
# print(d2)

# malData = pd.read_csv("SamplesDataset.csv", index_col=0)
# print(malData['NumberOfSections'])
# malData = malData.drop('e_magic', axis=1)

# for selecting rows of specific column value
# d = malData.loc[malData['NumberOfSections'] == 100]
# print(d)

# malData['NumberOfSections'] = ''
# # # updates the csv file
# malData.to_csv('SamplesDataset.csv')


# features = ['Machine', 'SizeOfOptionalHeader', 'Characteristics',
#             'MajorLinkerVersion', 'MinorLinkerVersion', 'SizeOfCode',
#             'SizeOfInitializedData', 'SizeOfUninitializedData',
#             'AddressOfEntryPoint', 'BaseOfCode', 'BaseOfData', 'ImageBase',
#             'SectionAlignment', 'FileAlignment', 'MajorOperatingSystemVersion',
#             'MinorOperatingSystemVersion', 'MajorImageVersion', 'MinorImageVersion',
#             'MajorSubsystemVersion', 'MinorSubsystemVersion', 'SizeOfImage',
#             'SizeOfHeaders', 'CheckSum', 'Subsystem', 'DllCharacteristics',
#             'SizeOfStackReserve', 'SizeOfStackCommit', 'SizeOfHeapReserve',
#             'SizeOfHeapCommit', 'LoaderFlags', 'NumberOfRvaAndSizes']
# print(malData.loc[malData['hash'] == filename, 'NumberOfSections'])
# print('successfully wriiten to csv')
# e_magic = pe.DOS_HEADER.e_magic
# Machine = pe.FILE_HEADER.Machine
# print('Hash of file is: ' + filename)
# print("Number of sections "+str(NumberOfSections))
# print('Emagic '+str(e_magic))
# print('Machine '+str(Machine))
